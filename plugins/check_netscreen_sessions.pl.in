#!@PERL@
# vim: et sts=4 sw=4 ts=4
# nagios: +epn
#
# @COPYRIGHT@
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#
# Please send comments, bugs and feature requests to @BUGREPORT@

use strict;
use warnings;

use Net::SNMP qw(:snmp);
use Nagios::Plugin;

BEGIN {
    no warnings 'redefine';
    *Nagios::Plugin::Functions::get_shortname = sub {};
}

use constant {
    VERSION     => '@VERSION@',
    BLURB       => q{This plugin checks session utilization on Netscreen (now Juniper)
devices that support the NETSCREEN-RESOURCE-MIB.},
    SHORTNAME   => 'Session Usage',
    USAGE       => q{Usage: %s -H <host> -w <percent> -c <percent> [-1]
       [-p <port>] [-C <community>]},
    LICENSE     => q{@COPYRIGHT@

This plugin is free software, and comes with ABSOLUTELY NO WARRANTY.
It may be used, redistributed and/or modified under the terms of the
ISC Licence (see http://opensource.org/licenses/isc-license.txt).},
    TIMEOUT     => 10,
};

my $np = Nagios::Plugin->new(
    version     => VERSION,
    blurb       => BLURB,
    shortname   => SHORTNAME,
    usage       => USAGE,
    license     => LICENSE,
    timeout     => TIMEOUT,
);

use constant {
    # NETSCREEN-RESOURCE-MIB::nsResSessAllocate
    OID_SESS_ALLOC  => '1.3.6.1.4.1.3224.16.3.2.0',
    # NETSCREEN-RESOURCE-MIB::nsResSessMaximum
    OID_SESS_MAX    => '1.3.6.1.4.1.3224.16.3.3.0',
    # NETSCREEN-RESOURCE-MIB:nsResSessFailed
    OID_SESS_FAILED => '1.3.6.1.4.1.3224.16.3.4.0',
};

$np->add_arg(
    spec        => 'host|H=s',
    help        => q{IP address or hostname (use an IP address if possible to prevent a
   DNS query},
    label       => 'ADDRESS',
    required    => 1,
);

$np->add_arg(
    spec        => 'port|p=i',
    help        => 'Port number (default: %s)',
    default     => 161,
);

$np->add_arg(
    spec        => 'community|C=s',
    help        => 'SNMP community string (default: %s)',
    default     => 'public',
);

$np->add_arg(
    spec        => '1',
    help        => 'Use SNMP protocol version 1',
);

$np->add_arg(
    spec        => 'warning|w=s',
    help        => 'Exit with WARNING status if session utilization exceeds INTEGER%',
    required    => 1,
);

$np->add_arg(
    spec        => 'critical|c=s',
    help        => 'Exit with CRITICAL status if session utilization exceeds INTEGER%',
    required    => 1,
);

$np->getopts;

alarm $np->opts->timeout;

my ($session, $error) = Net::SNMP->session(
    -hostname   => $np->opts->host,
    -version    => $np->opts->{'1'} ? '1' : '2',
    -community  => $np->opts->community,
    -timeout    => $np->opts->timeout/4,
    -retries    => 1,
    -port       => $np->opts->port,
);

unless (defined($session)) {
    alarm 0;
    $np->nagios_die($error);
}

my $result = $session->get_request(
    -varbindlist    => [
        OID_SESS_ALLOC,
        OID_SESS_MAX,
        OID_SESS_FAILED
    ]
);

unless (defined($result)) {
    alarm 0;
    $error = $session->error;
    $session->close();
    $np->nagios_die($error);
}

$session->close();
alarm 0;

if (grep(/^noSuchObject$/i, values(%{$result}))) {
    $np->nagios_die('Host does not support the NETSCREEN-RESOURCE-MIB');
}

my $sess_alloc = $result->{OID_SESS_ALLOC()};
my $sess_max = $result->{OID_SESS_MAX()};
my $sess_failed = $result->{OID_SESS_FAILED()};

my $sess_alloc_pc = ($sess_alloc / $sess_max) * 100;
my $warn = ($sess_max / 100) * $np->opts->warning;
my $crit = ($sess_max / 100) * $np->opts->critical;

$np->add_perfdata(
    label       => 'Sessions Used',
    value       => $sess_alloc,
    min         => 0,
    max         => $sess_max,
    warning     => $warn,
    critical    => $crit
);

$np->add_perfdata(
    label       => 'Sessions Failed',
    uom         => 'c',
    value       => $sess_failed,
    min         => 0,
);

my $code = $np->check_threshold(
    check       => $sess_alloc,
    warning     => $warn,
    critical    => $crit,
);

$np->nagios_exit($code, sprintf(
    '%.1f%% (%d/%d)',
    $sess_alloc_pc, $sess_alloc, $sess_max
));
