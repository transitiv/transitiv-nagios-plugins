#!@PERL@
# vim: et sts=4 sw=4 ts=4
# nagios: +epn
#
# @COPYRIGHT@
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#
# Please send comments, bugs and feature requests to @BUGREPORT@

use warnings;
use strict;

use Net::SNMP qw(:snmp);
use Nagios::Plugin;

BEGIN {
    no warnings 'redefine';
    *Nagios::Plugin::Functions::get_shortname = sub {};
}

use constant {
    VERSION     => '@VERSION@',
    BLURB       => q{This plugin checks the processor load on devices supporting
the HOST-RESOURCES-MIB.},
    SHORTNAME   => 'Load',
    USAGE       => q{Usage: %s -H <host> [-C <community>] [-t <timeout>]
    -w <percentage> -c <percentage>},
    TIMEOUT     => 10,
    LICENSE     => q{@COPYRIGHT@

This plugin is free software, and comes with ABSOLUTELY NO WARRANTY.
It may be used, redistributed and/or modified under the terms of the
ISC Licence (see http://opensource.org/licenses/isc-license.txt).},
};

sub plugin_die {
    my ($np, $msg) = @_;
    print $np->opts->_usage . "\n";
    print $msg . "\n";
    exit(UNKNOWN);
}

my $np = Nagios::Plugin->new(
    usage       => USAGE,
    shortname   => SHORTNAME,
    version     => VERSION,
    blurb       => BLURB,
    timeout     => TIMEOUT,
    license     => LICENSE,
);

use constant {
    # HOST-RESOURCES-MIB::hrProcessorLoad
    # The average, over the last minute, of the percentage of time that
    # this processor was not idle.
    OID_PROCESSOR_LOAD_TABLE    => '1.3.6.1.2.1.25.3.3.1.2',
};

$np->add_arg(
    spec        => 'host|H=s',
    help        => q{IP address or hostname (use an IP address if possible to prevent a
   DNS query)},
    required    => 1,
    label       => 'HOSTNAME',
);

$np->add_arg(
    spec        => 'port|p=i',
    help        => 'Port number (default: %s)',
    default     => 161,
);

$np->add_arg(
    spec        => 'community|C=s',
    help        => 'SNMP community string (default: %s)',
    default     => 'public',
);

$np->add_arg(
    spec        => '1',
    help        => 'Use SNMP protocol version 1',
);

$np->add_arg(
    spec        => 'warning|w=i',
    help        => 'Exit with WARNING status if processor load exceeds PERCENT%',
    required    => 1,
    label       => 'PERCENT'
);

$np->add_arg(
    spec        => 'critical|c=i',
    help        => 'Exit with CRITICAL status if processor load exceeds PERCENT%',
    required    => 1,
    label       => 'PERCENT'
);

$np->getopts;

my $warning = $np->opts->warning;
my $critical = $np->opts->critical;

if (($warning < 0) || ($warning > 100)) {
    plugin_die($np, 'Warning argument must be an integer value between 0 and 100, try --help');
}

if (($critical < 0) || ($critical > 100)) {
    plugin_die($np, 'Critical argument must be an integer value between 0 and 100, try --help');
}

my ($session, $error) = Net::SNMP->session(
    -hostname   => $np->opts->host,
    -version    => $np->opts->{'1'} ? '1' : '2',
    -community  => $np->opts->community,
    -timeout    => $np->opts->timeout/4,
    -port       => $np->opts->port,
    -retries    => 1,
);

if (!defined($session)) {
    alarm 0;
    $np->nagios_die($error);
}

my $result = $session->get_table(
    -baseoid    => OID_PROCESSOR_LOAD_TABLE
);

if (!defined($result)) {
    alarm 0;
    $error = $session->error();
    $session->close();
    if ($error =~ /requested table is empty/i) {
        $error = 'Device does not support the HOST-RESOURCES-MIB';
    }
    $np->nagios_die($error);
}

alarm 0;
$session->close();

if (!%$result) {
    $np->nagios_die('No CPUs found on this device');
}

my $n = 1;

# Sort by OID to ensure graph data sources are consistent
foreach my $oid (oid_lex_sort(keys(%$result))) {
    $np->add_perfdata(
        label       => "CPU #$n",
        value       => $result->{$oid},
        uom         => '%',
        min         => 0,
        max         => 100,
        warning     => $np->opts->warning,
        critical    => $np->opts->critical
    );

    my $code = $np->check_threshold(
        check       => $result->{$oid},
        warning     => $np->opts->warning,
        critical    => $np->opts->critical
    );

    $np->add_message($code, sprintf(
        'CPU #%d: %d%%', $n, $result->{$oid}
    ));

    $n++;
}

my ($code, $message) = $np->check_messages(join => ', ');

$np->nagios_exit($code, $message);
