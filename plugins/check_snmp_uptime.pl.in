#!/usr/bin/perl -w
# vim: et sts=4 sw=4 ts=4
# nagios: +epn
#
# @COPYRIGHT@
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#
# Please send comments, bugs and feature requests to @BUGREPORT@

# parse the argument provided to make sure it's in the format
# 12d or 14h or 15m or etc.

sub args_to_secs($) {
    my $arg = shift;
    my $secs = -1;
    if ($arg =~ /(\d+)d/) {
    	$secs = $1 * 86400;
    } elsif ($arg =~ /(\d+)h/) {
	    $secs = $1 * 3600;
    } elsif ($arg =~ /(\d+)m/) {
    	$secs = $1 * 60;
    } elsif ($arg =~ /(\d+)s/) {
    	$secs = $1;
    }
    return $secs;
}

sub secs_to_string($) {
    my $secs = shift;
    if ($secs < 1) {
        return "a very short time";
    }

    my ($days, $hours, $mins, @arr);
    $days = int($secs / 86400);
    if ($days > 0) {
        push(@arr, "${days} day" . ($days > 1 ? 's' : ''));
    }

    $secs = $secs % 86400;
    $hours = int($secs / 3600);
    if ($hours > 0) {
        push(@arr, "${hours} hour" . ($hours > 1 ? 's' : ''));
    }
    $secs = $secs % 3600;
    $mins = int($secs / 60);
    if ($mins > 0) {
        push(@arr, "${mins} minute" . ($mins > 1 ? 's' : ''));
    }
    $secs = $secs % 60;
    if ($secs > 0) {
        push(@arr, "${secs} second" . ($secs > 1 ? 's' : ''));
    }

    if (scalar(@arr) == 1) {
        return $arr[0];
    } elsif (scalar(@arr) == 2) {
        return join(' and ', @arr);
    } else {
        return join(', ', @arr[0..scalar(@arr)-2]) . ' and ' . $arr[-1];
    }
}

use strict;
use Net::SNMP qw(:snmp);
use Nagios::Plugin;

use constant {
    VERSION     => '@VERSION@',
    BLURB       => q{Checks device uptime via SNMP.},
    SHORTNAME   => 'SNMP Uptime',
    USAGE       => q{Usage: %s [-H <host>] [-C <snmp_community>] -t <timeout>
    [ -c|--critical=<threshold> ] [ -w|--warning=<threshold> ]},
    TIMEOUT     => 10,
    LICENSE     => q{@COPYRIGHT@

This plugin is free software, and comes with ABSOLUTELY NO WARRANTY.
It may be used, redistributed and/or modified under the terms of the
ISC Licence (see http://opensource.org/licenses/isc-license.txt).},
};

my $np = Nagios::Plugin->new(
    usage       => USAGE,
    shortname   => SHORTNAME,
    version     => VERSION,
    blurb       => BLURB,
    timeout     => TIMEOUT,
    license     => LICENSE,
);

# Define the OIDs we are interested in
# Uptime
my $oid_uptime = "1.3.6.1.2.1.1.3.0";

# Specify out arguments
$np->add_arg(
    spec        => 'host|H=s',
    help        => q{IP address or hostname (use an IP address if possible to prevent a
   DNS query)},
    required    => 1,
    label       => 'HOSTNAME',
);

$np->add_arg(
    spec        => 'community|C=s',
    help        => 'SNMP community string',
    required    => 1,
    label       => 'COMMUNITY STRING',
    default     => 'public',
);

$np->add_arg(
    spec        => 'warning|w=s',
    help        => 'Warning level for Uptime. An integer value followed by either d, h, m or s, e.g. 90m',
    required    => 1,
    label       => 'THRESHOLD'
);

$np->add_arg(
    spec        => 'critical|c=s',
    help        => 'Critical level for Uptime. An integer value followed by either d, h, m or s, e.g. 90m',
    required    => 1,
    label       => 'THRESHOLD'
);

$np->getopts;

# Check the warn/crit values are sensible and bail out if not
my $warning_secs = args_to_secs($np->opts->warning);
if ($warning_secs == -1) {
    print STDERR "Warning argument must be an integer value followed by either d, h, m or s\n";
    $np->nagios_die();
}

my $critical_secs = args_to_secs($np->opts->critical);
if ($critical_secs == -1) {
    print STDERR "Critical argument must be an integer value followed by either d, h, m or s\n";
    $np->nagios_die();
}

my ($session, $error) = Net::SNMP->session(
    -hostname   => $np->opts->host,
    -version    => '1',
    -community  => $np->opts->community,
    -timeout    => $np->opts->timeout/4,
    -retries    => 1,
    -port       => 161,
);

if (! defined($session)) {
    alarm 0;
    $np->nagios_die($error);
}

$session->translate(0);

my @oids = (
    $oid_uptime
);  

my $result = $session->get_request(
    -varbindlist    => \@oids,
);

if (!defined($result)) {
    alarm 0;
    $error = $session->error;
    $session->close();
    $np->nagios_die($error);
}

# Get the value and convert to seconds
my $uptime = $$result{$oid_uptime}/100;
my ($code, $message);

$code = $np->check_threshold(
    check       => $uptime,
#    warning     => $np->opts->warning . ':',
    warning     => $warning_secs . ':',
#    critical    => $np->opts->critical . ':',
    critical    => $critical_secs . ':',
);

my $uptime_string = secs_to_string($uptime);

$np->nagios_exit($code, $uptime_string);

