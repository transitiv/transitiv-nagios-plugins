#!@PERL@ -w
# vim: et sts=4 sw=4 ts=4
# nagios: +epn
#
# @COPYRIGHT@
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#
# Please send comments, bugs and feature requests to @BUGREPORT@

use strict;
use Net::SNMP qw(:snmp);
use Nagios::Plugin;

use constant {
    VERSION     => '@VERSION@',
    BLURB       => q{This plugin checks the status of an interface on devices supporting
the IF-MIB.},
    SHORTNAME   => 'Interface',
    USAGE       => q{Usage: %s -H <host> -n <interface name> [-2] [-C <community>] [-i] [--64bit]},
    LICENSE     => q{@COPYRIGHT@

This plugin is free software, and comes with ABSOLUTELY NO WARRANTY.
It may be used, redistributed and/or modified under the terms of the
ISC Licence (see http://opensource.org/licenses/isc-license.txt).},
    TIMEOUT     => 10,
};

my $np = Nagios::Plugin->new(
    version     => VERSION,
    blurb       => BLURB,
    shortname   => SHORTNAME,
    usage       => USAGE,
    license     => LICENSE,
    timeout     => TIMEOUT,
);

use constant {
    # IF-MIB::ifDescr
    OID_DESC_TABLE          => '1.3.6.1.2.1.2.2.1.2',
    # IF-MIB::ifOperStatus
    OID_STATE_TABLE         => '1.3.6.1.2.1.2.2.1.8',
    # IF-MIB::ifSpeed
    OID_SPEED_TABLE         => '1.3.6.1.2.1.2.2.1.5',
    # IF-MIB::ifInOctets
    OID_IN_OCTETS_TABLE     => '1.3.6.1.2.1.2.2.1.10',
    # IF-MIB::ifHCInOctets
    OID_HC_IN_OCTETS_TABLE  => '1.3.6.1.2.1.31.1.1.1.6',
    # IF-MIB::ifOutOctets
    OID_OUT_OCTETS_TABLE    => '1.3.6.1.2.1.2.2.1.16',
    # IF-MIB::ifHCOutOctets
    OID_HC_OUT_OCTETS_TABLE => '1.3.6.1.2.1.31.1.1.1.10',

    # ifOperStatus enumeration values
    # ready to pass packets
    STATUS_VALUE_UP                 => 1,
    # link down
    STATUS_VALUE_DOWN               => 2,
    # in some test mode
    STATUS_VALUE_TESTING            => 3,
    # status cannot be determined
    STATUS_VALUE_UNKNOWN            => 4,
    STATUS_VALUE_DORMANT            => 5,
    # some component is missing
    STATUS_VALUE_NOT_PRESENT        => 6,
    # down due to state of lower-layer interface(s)
    STATUS_VALUE_LOWER_LAYER_DOWN   => 7,

    # Mapping of ifOperStatus values to strings
    STATUS_VALUE_STRINGS => [
        undef,
        'up',
        'down',
        'unknown',
        'dormant',
        'not present',
        'down'
    ]
};

$np->add_arg(
    spec        => 'host|H=s',
    help        => q{IP address or hostname (use an IP address if possible to prevent a
   DNS query},
    label       => 'ADDRESS',
    required    => 1,
);

$np->add_arg(
    spec        => 'port|p=i',
    help        => 'Port number (default: %s)',
    default     => 161,
);

$np->add_arg(
    spec        => 'community|C=s',
    help        => 'SNMP community string (default: %s)',
    default     => 'public',
);

$np->add_arg(
    spec        => 'name|n=s',
    help        => 'Interface name to check (i.e. FastEthernet0, ATM0, eth0)',
    required    => 1,
);

$np->add_arg(
    spec        => 'inverse|i',
    help        => 'Exit with CRITICAL status if the interface is up',
);

$np->add_arg(
    spec        => '2',
    help        => 'Use SNMP protocol version 2',
);

$np->add_arg(
    spec        => '64bit',
    help        => q{Query 64 bit counters for interface performance data. Must be used in
   conjunction with SNMPv2 (see above)}
);

$np->getopts;

if ($np->opts->{'64bit'} && !$np->opts->{'2'}) {
    print $np->opts->_usage . "\n";
    print "Sorry, 64 bit counters are not supported by SNMPv1\n";
    exit(UNKNOWN);
}

alarm $np->opts->timeout;

my ($session, $error) = Net::SNMP->session(
    -hostname   => $np->opts->host,
    -version    => $np->opts->{'2'} ? '2' : '1',
    -community  => $np->opts->community,
    -timeout    => $np->opts->timeout/4,
    -retries    => 1,
    -port       => $np->opts->port,
);

if (! defined($session)) {
    alarm 0;
    $np->nagios_die($error);
}

# Walk the interface description table
my $desc_table = $session->get_table(
    -baseoid    => OID_DESC_TABLE,
);

# Bail if we couldn't walk the table
if (! defined($desc_table)) {
    alarm 0;
    $error = $session->error;
    $session->close();
    $np->nagios_die($error);
}

# Index number of the given interface in the table
my $int_index;

# Look for the specified interface in the table
# If found, extract its index number
while (my ($key, $val) = each %$desc_table) {
    if ($val eq $np->opts->name) {
        my @oids = split /\./, $key;
        $int_index = $oids[-1];
        last;
    }
}

# Check we actually got an interface
if (!defined($int_index)) {
    $np->nagios_die(sprintf(
        "No interface found named `%s'",
        $np->opts->name
    ));
}

# Build the OIDs using the interface index found above 
my $int_state_oid = OID_STATE_TABLE . '.' . $int_index;
my $int_speed_oid = OID_SPEED_TABLE . '.' . $int_index;
my ($in_octets_oid, $out_octets_oid);

if ($np->opts->{'64bit'}) {
    $in_octets_oid = OID_HC_IN_OCTETS_TABLE . '.' . $int_index;
    $out_octets_oid = OID_HC_OUT_OCTETS_TABLE . '.' . $int_index;
} else {
    $in_octets_oid = OID_IN_OCTETS_TABLE . '.' . $int_index;
    $out_octets_oid = OID_OUT_OCTETS_TABLE . '.' . $int_index;
}

my @oids = (
    $int_state_oid,
    $int_speed_oid,
    $in_octets_oid,
    $out_octets_oid,
);

my $result = $session->get_request(
    -varbindlist    => \@oids,
);

if (!defined($result)) {
    alarm 0;
    $error = $session->error;
    $session->close();
    $np->nagios_die($error);
}

# disable the alarm now we've run the queries
alarm 0;

# index the hash by the OID
my $int_state = $$result{$int_state_oid} || STATUS_VALUE_UNKNOWN;
my $int_speed = ($$result{$int_speed_oid} || 0);
my $in_octets = $$result{$in_octets_oid} || 0;
my $out_octets = $$result{$out_octets_oid} || 0;

my ($code, $message);

if ($int_state == STATUS_VALUE_UP) {
    $code = (defined($np->opts->inverse) ? CRITICAL : OK);
} elsif ($int_state == STATUS_VALUE_UNKNOWN) {
    $code = UNKNOWN;
} else {
    $code = (defined($np->opts->inverse) ? OK : CRITICAL);
}

$np->add_perfdata(
    label       => 'speed',
    value       => $int_speed,
    uom         => 'bps'
);
$np->add_perfdata(
    label       => 'in_octets',
    value       => $in_octets,
    uom         => 'c',
    min         => 0
);
$np->add_perfdata(
    label       => 'out_octets',
    value       => $out_octets,
    uom         => 'c',
    min         => 0
);

$np->nagios_exit($code, sprintf(
    "%s is %s", $np->opts->name, STATUS_VALUE_STRINGS->[$int_state]
));
