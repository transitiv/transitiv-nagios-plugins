#!@PERL@ -w
# vim: et sts=4 sw=4 ts=4
# nagios: +epn
#
# @COPYRIGHT@
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#
# Please send comments, bugs and feature requests to @BUGREPORT@

# Walk interface index
# Associate interface with index no
# get interface status by index
# output up or down
# get inoctets, outoctets and linespeed perfdata

use strict;
use Net::SNMP qw(:snmp);
use Nagios::Plugin;

use constant {
    VERSION     => '@VERSION@',
    BLURB       => q{This plugin checks interface status on devices supporting the IF-MIB and returns bandwidth usage performance data.},
    SHORTNAME   => 'check_snmp_interface',
    USAGE       => q{Usage: %s -H <host> -n <interface name> [-i] [-2] [-C <community>]},
    LICENSE     => q{@COPYRIGHT@

This plugin is free software, and comes with ABSOLUTELY NO WARRANTY.
It may be used, redistributed and/or modified under the terms of the
ISC Licence (see http://opensource.org/licenses/isc-license.txt).},
    TIMEOUT     => 10,
};

my $np = Nagios::Plugin->new(
    version     => VERSION,
    blurb       => BLURB,
    shortname   => SHORTNAME,
    usage       => USAGE,
    license     => LICENSE,
    timeout     => TIMEOUT,
);

# Define the OIDs we are interested in
# Interface descriptions
my $desc_table_oid = '.1.3.6.1.2.1.2.2.1.2';
# interface operational state
my $state_table_oid = '1.3.6.1.2.1.2.2.1.8';
# Represents the state of a interface being monitored.$np->nagios_die($error);
# Valid values are:
#
# up(1):             the interface is up
#
# down(2):           the interface is down
#
# line speed in bits
my $int_speed_table_oid = '1.3.6.1.2.1.2.2.1.5';
# inbound bytes
my $in_octets_table_oid = '1.3.6.1.2.1.2.2.1.10';
# outbound bytes
my $out_octets_table_oid = '1.3.6.1.2.1.2.2.1.16';

use constant {
    INTERFACE_UP          => 1,
    INTERFACE_DOWN        => 2,
};

# Define our arguments
$np->add_arg(
    spec        => 'host|H=s',
    help        => q{IP address or hostname (use an IP address if possible to prevent a
   DNS query},
    label       => 'ADDRESS',
    required    => 1,
);

$np->add_arg(
    spec        => 'community|C=s',
    help        => 'SNMP community string (default: %s)',
    default     => 'public',
);

$np->add_arg(
    spec        => 'name|n=s',
    help        => 'Interface name (eth0, ppp0, wlan0 etc)',
    required    => 1,
);

$np->add_arg(
    spec        => 'inverse|i',
    help        => 'The default logic alerts if an interface is down, this option inverts that to alert if an interface is up',
);

$np->add_arg(
    spec        => '2',
    help        => 'Use SNMP protocol version 2',
);

$np->getopts;
alarm $np->opts->timeout;

my ($session, $error) = Net::SNMP->session(
    -hostname   => $np->opts->host,
    -version    => $np->opts->{'2'} ? '2' : '1',
    -community  => $np->opts->community,
    -timeout    => $np->opts->timeout/4,
    -retries    => 1,
    -port       => 161,
);

if (! defined($session)) {
    alarm 0;
    $np->nagios_die($error);
}

# Walk the interface description table
my $desc_table = $session->get_table(
    -baseoid    => $desc_table_oid,
);

# Bail if we couldn't walk the table
if (! defined($desc_table)) {
    alarm 0;
    $error = $session->error;
    $session->close();
    $np->nagios_die($error);
}

# Index number of the given interface in the table
my $int_index;

# Look for our interface in the table and get its index number
while (my ($key, $val) = each %$desc_table) {
    if ($val eq $np->opts->name) {
        $int_index = substr $key, -1;
        last;
    }
}

# Check we actually got an interface
if (!defined($int_index)) {
    $np->nagios_die("No interface found matching " . $np->opts->name);
}

## Get the status, linespeed, inoctets and outoctets for the interface and stuff them in an array
my $int_state_oid = $state_table_oid . '.' . $int_index;
my $int_speed_oid = $int_speed_table_oid . '.' . $int_index;
my $in_octets_oid = $in_octets_table_oid . '.' . $int_index;
my $out_octets_oid = $out_octets_table_oid . '.' . $int_index;

# Build an SNMP query which calls the OIDs constructed above

my @oids = ($int_state_oid,$int_speed_oid,$in_octets_oid,$out_octets_oid);

my $result = $session->get_request(
    -varbindlist    => \@oids,
);

if (!defined($result)) {
    alarm 0;
    $error = $session->error;
    $session->close();
    $np->nagios_die($error);
}

# disable the alarm now we've run the queries
alarm 0;

# index the hash by the OID
my $int_state = $$result{$int_state_oid};
my $int_speed = $$result{$int_speed_oid}/8;
my $in_octets = $$result{$in_octets_oid};
my $out_octets = $$result{$out_octets_oid};

# Output the check result and status according to whether inverse was specified
if ($int_state == INTERFACE_UP) {
    if (!defined($np->opts->inverse)) {
        $np->add_message(OK,$np->opts->name . " is up");
    } else {
        $np->add_message(CRITICAL,$np->opts->name . " is up");
    }
} else {
    if (!defined($np->opts->inverse)) {
        $np->add_message(CRITICAL,$np->opts->name . " is down");
    } else {
        $np->add_message(OK,$np->opts->name . " is up");
    }
}

$np->add_perfdata(
    label       => 'Link Speed',
    value       => $int_speed,
);
$np->add_perfdata(
    label       => 'Data In',
    value       => $in_octets,
    uom         => 'c',
);
$np->add_perfdata(
    label       => 'Data Out',
    value       => $out_octets,
    uom         => 'c',
);

my ($code, $message) = $np->check_messages(
    join    => ', '
);

$np->nagios_exit($code, $message);
