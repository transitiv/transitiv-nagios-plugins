#!@PERL@
# vim: et sts=4 sw=4 ts=4
# nagios: +epn
#
# @COPYRIGHT@
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#
# Please send comments, bugs and feature requests to @BUGREPORT@

use strict;
use warnings;

use Net::SNMP qw(:snmp);
use Nagios::Plugin;

BEGIN {
    no warnings 'redefine';
    *Nagios::Plugin::Functions::get_shortname = sub {};
}

use constant {
    VERSION     => '@VERSION@',
    BLURB       => q{This plugin checks the status of a content rule on load balancers
supporting the ARROWPOINT-CNTSVCEXT-MIB.},
    SHORTNAME   => 'Content Rule',
    USAGE       => q{Usage: %s -H <host> -o <owner> -n <content rule>
       -w <warning> -c <critical> [-C <community>] [-t <timeout>]},
    LICENSE     => q{@COPYRIGHT@

This plugin is free software, and comes with ABSOLUTELY NO WARRANTY.
It may be used, redistributed and/or modified under the terms of the
ISC Licence (see http://opensource.org/licenses/isc-license.txt).},
    TIMEOUT     => 10,
};

use constant {
    # ARROWPOINT-IPV4-MIB::apIpv4B2BRedundancy.0
    OID_IPV4_REDUNDANCY_B2B     => '1.3.6.1.4.1.9.9.368.1.9.1.17.0',
    # ARROWPOINT-IPV4-MIB::apIpv4RedundancyState.0
    OID_IPV4_REDUNDANCY_STATE   => '1.3.6.1.4.1.9.9.368.1.9.1.19.0',

    # ARROWPOINT-CNTSVCEXT-MIB::apCntsvcCntName
    OID_CONTENT_SERVICE_NAME    => '1.3.6.1.4.1.9.9.368.1.18.2.1.3',
    # ARROWPOINT-CNTSVCEXT-MIB::apCntsvcHits
    OID_CONTENT_SERVICE_HITS    => '1.3.6.1.4.1.9.9.368.1.18.2.1.4',
    # ARROWPOINT-CNTSVCEXT-MIB::apCntsvcBytes
    OID_CONTENT_SERVICE_BYTES   => '1.3.6.1.4.1.9.9.368.1.18.2.1.5',
    # ARROWPOINT-CNTSVCEXT-MIB::apCntsvcState
    OID_CONTENT_SERVICE_STATE   => '1.3.6.1.4.1.9.9.368.1.18.2.1.12',

    # Possible values for ARROWPOINT-CNTSVCEXT-MIB::apCntsvcState
    SERVICE_STATE_SUSPENDED => 1,
    SERVICE_STATE_DOWN      => 2,
    SERVICE_STATE_ALIVE     => 4,

    # Possible values for ARROWPOINT-IPV4-MIB::apIpv4RedundancyState
    REDUNDANCY_STATE_INIT   => 1,
    REDUNDANCY_STATE_BACKUP => 2,
    REDUNDANCY_STATE_MASTER => 3,
    REDUNDANCY_STATE_DOWN   => 4,

    # Keys for data hash
    HITS    => 1,
    BYTES   => 2,
    STATE   => 3,
};

sub oid_len {
    my @oids = split(/\./, shift);
    return scalar(@oids);
}

sub string_to_oid {
    my $str = shift;
    # The first value is the length of the string
    my @oids = (length($str));
    push(@oids, map(ord, split(//, $str)));

    return join('.', @oids);
}

sub oid_to_string {
    my ($oid, $offset) = @_;
    my @oids = split(/\./, $oid);
    my $strlen = $oids[$offset];
    my $start = $offset + 1;
    my $end = $offset + $strlen;

    return pack('c*', @oids[$start..$end]);
}

sub die_usage {
    my ($np, $msg) = @_;
    print $np->opts->_usage() . "\n";
    print $msg . "\n";
    exit(UNKNOWN);
}

my $np = Nagios::Plugin->new(
    version     => VERSION,
    blurb       => BLURB,
    shortname   => SHORTNAME,
    usage       => USAGE,
    license     => LICENSE,
    timeout     => TIMEOUT,
);

$np->add_arg(
    spec        => 'host|H=s',
    help        => q{IP address or hostname (use an IP address if possible to prevent a
   DNS query)},
    label       => 'ADDRESS',
    required    => 1,
);

$np->add_arg(
    spec        => 'community|C=s',
    help        => 'SNMP community string (default: %s)',
    default     => 'public',
);

$np->add_arg(
    spec        => 'owner|o=s',
    help        => 'Owner of the content rule specified by --name',
    required    => 1,
);

$np->add_arg(
    spec        => 'name|n=s',
    help        => 'Name of the content rule to be checked',
    required    => 1,
);

$np->add_arg(
    spec        => 'warning|w=s',
    help        => [
        'Exit with WARNING status if greater than INTEGER services are down',
        'Exit with WARNING status if greater than PERCENT% of services are down',
    ],
    label       => ['INTEGER', 'PERCENT%'],
    required    => 1,
);

$np->add_arg(
    spec        => 'critical|c=s',
    help        => [
        'Exit with CRITICAL status if greater than INTEGER services are down',
        'Exit with CRITICAL status if greater than PERCENT% of services are down',
    ],
    label       => ['INTEGER', 'PERCENT%'],
    required    => 1,
);

$np->getopts;

my ($warning, $warning_pc, $critical, $critical_pc);

if ($np->opts->warning =~ /^(\d+)%$/) {
    $warning_pc = $1;
} elsif ($np->opts->warning =~ /^(\d+)$/) {
    $warning = $1;
} else {
    die_usage($np, 'Invalid format for warning argument, try --help');
}

if ($np->opts->critical =~ /^(\d+)%$/) {
    $critical_pc = $1;
} elsif ($np->opts->critical =~ /^(\d+)$/) {
    $critical = $1;
} else {
    die_usage($np, 'Invalid format for critical argument, try --help');
}

$np->{shortname} = $np->opts->name;

my ($session, $error) = Net::SNMP->session(
    -hostname   => $np->opts->host,
    -version    => SNMP_VERSION_2C,
    -community  => $np->opts->community,
    -timeout    => $np->opts->timeout/4,
    -retries    => 1,
    -port       => 161,
);

unless (defined($session)) {
    alarm 0;
    $np->nagios_die($error);
}

my @oids = (
    OID_IPV4_REDUNDANCY_B2B,
    OID_IPV4_REDUNDANCY_STATE
);

my $result = $session->get_request(
    -varbindlist    => \@oids
);

unless (defined($result)) {
    alarm 0;
    $error = $session->error;
    $session->close();
    $np->nagios_die($error);
}

my $active = 1;
my $redundancy = $result->{OID_IPV4_REDUNDANCY_B2B()};
my $state = $result->{OID_IPV4_REDUNDANCY_STATE()};

# All services are reported as down when redundancy is enabled and the
# device is not the active (or "master") node in the cluster. We will
# still query for statistics in any case as the device may have switched
# roles since it was last checked.
if ($redundancy == 1 && $state != REDUNDANCY_STATE_MASTER) {
    $active = 0;
}

# Construct the OIDs of the tables to be queried. The length of each
# OID is stored for use as an argument to oid_to_string() when the
# response is processed below.
my $owner_oid = string_to_oid($np->opts->owner);
my $name_oid = string_to_oid($np->opts->name);
my $hits_table = sprintf('%s.%s.%s',
    OID_CONTENT_SERVICE_HITS, $owner_oid, $name_oid
);
my $hits_table_len = oid_len($hits_table);
my $bytes_table = sprintf('%s.%s.%s',
    OID_CONTENT_SERVICE_BYTES, $owner_oid, $name_oid
);
my $bytes_table_len = oid_len($bytes_table);
my $state_table = sprintf('%s.%s.%s',
    OID_CONTENT_SERVICE_STATE, $owner_oid, $name_oid
);
my $state_table_len = oid_len($state_table);

@oids = (
    $hits_table,
    $bytes_table,
    $state_table,
);

$result = $session->get_entries(
    -columns    => \@oids
);

unless (defined($result)) {
    alarm 0;
    $error = $session->error;
    $session->close();
    $np->nagios_die($error);
}

$session->close();
alarm 0;

my $data = {};

foreach my $oid (keys(%$result)) {
    if (oid_base_match($hits_table, $oid)) {
        my $service = oid_to_string($oid, $hits_table_len);
        $data->{$service}->{HITS()} = $result->{$oid} if $service;
    } elsif (oid_base_match($bytes_table, $oid)) {
        my $service = oid_to_string($oid, $bytes_table_len);
        $data->{$service}->{BYTES()} = $result->{$oid} if $service;
    } elsif (oid_base_match($state_table, $oid)) {
        my $service = oid_to_string($oid, $state_table_len);
        $data->{$service}->{STATE()} = $result->{$oid} if $service;
    }
}

my $total = scalar(keys(%$data));
my ($alive, $down, $suspended) = (0, 0, 0);
my @down_services;

foreach my $service (keys(%$data)) {
    $np->add_perfdata(
        label   => "$service hits",
        value   => $data->{$service}->{HITS()},
        min     => 0,
        unit    => 'c',
    );
    $np->add_perfdata(
        label   => "$service bytes",
        value   => $data->{$service}->{BYTES()},
        min     => 0,
        unit    => 'c',
    );

    if ($data->{$service}->{STATE()} == SERVICE_STATE_ALIVE) {
        $alive++;
    } elsif ($data->{$service}->{STATE()} == SERVICE_STATE_DOWN) {
        $down++;
        push(@down_services, $service);
    } elsif ($data->{$service}->{STATE()} == SERVICE_STATE_SUSPENDED) {
        $suspended++;
    }
}

my ($code, $message);

# Calculate absolute thresholds from percentages (if provided).
unless (defined($warning)) {
    $warning = ($total / 100) * $warning_pc;
}
unless (defined($critical)) {
    $critical = ($total / 100) * $critical_pc;
}

if ($active) {
    $code = $np->check_threshold(
        check       => $down,
        warning     => $warning,
        critical    => $critical
    );
    $message = sprintf(
        'Service status: %i alive / %i down%s / %i suspended',
        $alive,
        $down,
        $down > 0 ? sprintf(' (%s)', join(', ', @down_services)) : '',
        $suspended
    );
} else {
    $code = OK;
    $message = 'Redundancy enabled and device not currently active';
}

$np->nagios_exit($code, $message);
