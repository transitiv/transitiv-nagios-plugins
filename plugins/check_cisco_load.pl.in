#!@PERL@ -w
# vim: et sts=4 sw=4 ts=4
# nagios: +epn
#
# @COPYRIGHT@
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#
# Please send comments, bugs and feature requests to @BUGREPORT@

use strict;
use Net::SNMP qw(:snmp);
use Nagios::Plugin;

use constant {
    VERSION     => '@VERSION@',
    BLURB       => q{This plugin checks the CPU load average on Cisco devices that support
the CISCO-PROCESS-MIB or the OLD-CISCO-CPU-MIB. Currently only SNMPv2
is supported.},
    SHORTNAME   => 'check_cisco_load',
    USAGE       => q{Usage: %s -H <host> -w <WLOAD5m,WLOAD1m,WLOAD5s>
       -c <CLOAD5m,CLOAD1m,CLOAD5s> [-C <community>]},
    LICENSE     => q{@COPYRIGHT@

This plugin is free software, and comes with ABSOLUTELY NO WARRANTY.
It may be used, redistributed and/or modified under the terms of the
ISC Licence (see http://opensource.org/licenses/isc-license.txt).},
    TIMEOUT     => 10,
};

my $np = Nagios::Plugin->new(
    version     => VERSION,
    blurb       => BLURB,
    shortname   => SHORTNAME,
    usage       => USAGE,
    license     => LICENSE,
    timeout     => TIMEOUT,
);

# Define the OIDs we are interested in
# OLD-CISCO-CPU-MIB
# avgBusy5
my $oid_old_cpu_5m = '1.3.6.1.4.1.9.2.1.58.0';
# avgBusy1
my $oid_old_cpu_1m = '1.3.6.1.4.1.9.2.1.57.0';
# busyPer
my $oid_old_cpu_5s = '1.3.6.1.4.1.9.2.1.56.0';
# CISCO-PROCESS-MIB
# cpmCPUTotal5min.1
my $oid_cpu_5m = '.1.3.6.1.4.1.9.9.109.1.1.1.1.5.1';
# cpmCPUTotal1min.1
my $oid_cpu_1m = '.1.3.6.1.4.1.9.9.109.1.1.1.1.4.1';
# cpmCPUTotal5sec.1
my $oid_cpu_5s = '.1.3.6.1.4.1.9.9.109.1.1.1.1.3.1';

# Define our arguments
$np->add_arg(
    spec        => 'host|H=s',
    help        => q{IP address or hostname (use an IP address if possible to prevent a
   DNS query},
    label       => 'ADDRESS',
    required    => 1,
);

$np->add_arg(
    spec        => 'community|C=s',
    help        => 'SNMP community string (default: %s)',
    default     => 'public',
);

$np->add_arg(
    spec        => 'warning|w=s',
    help        => 'Exit with WARNING status if CPU load exceeds WLOADn',
    label       => 'WLOAD15m,WLOAD5m,WLOAD5s',
    required    => 1,
);

$np->add_arg(
    spec        => 'critical|c=s',
    help        => 'Exit with CRITICAL status if CPU load exceeds CLOADn',
    label       => 'CLOAD15m,CLOAD5m,CLOAD5s',
    required    => 1,
);

$np->add_arg(
    spec        => 'old-device|o',
    help        => q{Query ADDRESS using OIDs defined in the OLD-CISCO-CPU-MIB.
   Try this if you receive a "requested table is empty or does not
   exist" error.},
    default     => 0,
);

$np->getopts;
alarm $np->opts->timeout;

my @warnings = split(/,/, $np->opts->warning);
if (scalar(@warnings) != 3) {
    $np->nagios_die(
        "You must specify 3 warning levels"
    );
}

my @criticals = split(/,/, $np->opts->critical);
if (scalar(@criticals) != 3) {
    $np->nagios_die(
        "You must specify 3 critical levels"
    );
}

my ($session, $error) = Net::SNMP->session(
    -hostname   => $np->opts->host,
    -version    => '2',
    -community  => $np->opts->community,
    -timeout    => $np->opts->timeout/4,
    -retries    => 1,
    -port       => 161,
);

if (! defined($session)) {
    alarm 0;
    $np->nagios_die($error);
}

my @oids;
if ($np->opts->{'old-device'}) {
    @oids = ($oid_old_cpu_5m, $oid_old_cpu_1m, $oid_old_cpu_5s);
} else {
    @oids = ($oid_cpu_5m, $oid_cpu_1m, $oid_cpu_5s);
}

my $result = $session->get_request(
    -varbindlist    => \@oids,
);

if (!defined($result)) {
    alarm 0;
    $error = $session->error;
    $session->close();
    $np->nagios_die($error);
}

my $cpu_5m = $$result{$np->opts->{'old-device'} ? $oid_old_cpu_5m : $oid_cpu_5m};
my $cpu_1m = $$result{$np->opts->{'old-device'} ? $oid_old_cpu_1m : $oid_cpu_1m};
my $cpu_5s = $$result{$np->opts->{'old-device'} ? $oid_old_cpu_5s : $oid_cpu_5s};
my ($code, $message);

$code = $np->check_threshold(
    check       => $cpu_5m,
    warning     => $warnings[0],
    critical    => $criticals[0],
);
$np->add_message(
    $code,
    sprintf("5 minutes: %i%%", $cpu_5m)
);

$code = $np->check_threshold(
    check       => $cpu_1m,
    warning     => $warnings[1],
    critical    => $criticals[1],
);
$np->add_message(
    $code,
    sprintf("1 minute: %i%%", $cpu_1m)
);

$code = $np->check_threshold(
    check       => $cpu_5s,
    warning     => $warnings[2],
    critical    => $criticals[2],
);
$np->add_message(
    $code,
    sprintf("5 seconds: %i%%", $cpu_5s)
);

$np->add_perfdata(
    label       => 'load_5_min',
    value       => $cpu_5m,
    uom         => '%',
    warning     => $warnings[0],
    critical    => $criticals[0],
);
$np->add_perfdata(
    label       => 'load_1_min',
    value       => $cpu_1m,
    uom         => '%',
    warning     => $warnings[1],
    critical    => $criticals[1],
);
$np->add_perfdata(
    label       => 'load_5_sec',
    value       => $cpu_5s,
    uom         => '%',
    warning     => $warnings[2],
    critical    => $criticals[2],
);

($code, $message) = $np->check_messages(
    join    => ', '
);

$np->nagios_exit($code, $message);
