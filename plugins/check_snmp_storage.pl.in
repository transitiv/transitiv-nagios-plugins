#!@PERL@
# vim: et sts=4 sw=4 ts=4
# nagios: +epn
#
# @COPYRIGHT@
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#
# Please send comments, bugs and feature requests to @BUGREPORT@

use warnings;
use strict;

use Net::SNMP qw(:snmp);
use Nagios::Plugin;

BEGIN {
    no warnings 'redefine';
    *Nagios::Plugin::Functions::get_shortname = sub {};
}

sub get_oid_index {
    my $oid = shift;
    my $idx = rindex($oid, '.');

    return substr($oid, $idx + 1);
}

use constant {
    VERSION     => '@VERSION@',
    BLURB       => q{This plugin checks the usage of storage resources on devices supporting
the HOST-RESOURCES-MIB.},
    SHORTNAME   => 'Storage',
    USAGE       => q{Usage: %s -H <host> [-C <community>] [-t <timeout>]
    -w <percentage> -c <percentage>},
    TIMEOUT     => 10,
    LICENSE     => q{@COPYRIGHT@

This plugin is free software, and comes with ABSOLUTELY NO WARRANTY.
It may be used, redistributed and/or modified under the terms of the
ISC Licence (see http://opensource.org/licenses/isc-license.txt).},
};

sub bytes_to_string {
    my $bytes = shift;

    if ($bytes >= 1024**3) {
        return sprintf("%.1fGiB", ($bytes / 1024**3));
    } elsif ($bytes >= 1024**2) {
        return sprintf("%.1fMiB", ($bytes / 1024**2));
    } elsif ($bytes >= 1024) {
        return sprintf("%.1fKiB", ($bytes / 1024));
    } else {
        return sprintf("%iB", $bytes);
    }
}

sub plugin_die {
    my ($np, $msg) = @_;
    print $np->opts->_usage . "\n";
    print $msg . "\n";
    exit(UNKNOWN);
}

my $np = Nagios::Plugin->new(
    usage       => USAGE,
    shortname   => SHORTNAME,
    version     => VERSION,
    blurb       => BLURB,
    timeout     => TIMEOUT,
    license     => LICENSE,
);

use constant {
    # HOST-RESOURCES-MIB::hrStorageType
    OID_STORAGE_TYPE_TABLE  => '1.3.6.1.2.1.25.2.3.1.2',
    # HOST-RESOURCES-MIB::hrStorageDescr
    OID_STORAGE_DESC_TABLE  => '1.3.6.1.2.1.25.2.3.1.3',
    # HOST-RESOURCES-MIB::hrStorageAllocationUnits
    OID_STORAGE_UNITS_TABLE => '1.3.6.1.2.1.25.2.3.1.4',
    # HOST-RESOURCES-MIB::hrStorageSize
    OID_STORAGE_SIZE_TABLE  => '1.3.6.1.2.1.25.2.3.1.5',
    # HOST-RESOURCES-MIB::hrStorageUsed
    OID_STORAGE_USED_TABLE  => '1.3.6.1.2.1.25.2.3.1.6',

    OID_STORAGE_TYPE_OTHER          => '1.3.6.1.2.1.25.2.1.1',
    OID_STORAGE_TYPE_RAM            => '1.3.6.1.2.1.25.2.1.2',
    OID_STORAGE_TYPE_VIRTUAL_MEMORY => '1.3.6.1.2.1.25.2.1.3',
    OID_STORAGE_TYPE_FIXED_DISK     => '1.3.6.1.2.1.25.2.1.4',
    OID_STORAGE_TYPE_REMOVABLE_DISK => '1.3.6.1.2.1.25.2.1.5',
    OID_STORAGE_TYPE_FLOPPY_DISK    => '1.3.6.1.2.1.25.2.1.6',
    OID_STORAGE_TYPE_COMPACT_DISC   => '1.3.6.1.2.1.25.2.1.7',
    OID_STORAGE_TYPE_RAM_DISK       => '1.3.6.1.2.1.25.2.1.8',
    OID_STORAGE_TYPE_FLASH_MEMORY   => '1.3.6.1.2.1.25.2.1.9',
    OID_STORAGE_TYPE_NETWORK_DISK   => '1.3.6.1.2.1.25.2.1.10',
};

$np->add_arg(
    spec        => 'host|H=s',
    help        => q{IP address or hostname (use an IP address if possible to prevent a
   DNS query)},
    required    => 1,
    label       => 'HOSTNAME',
);

$np->add_arg(
    spec        => 'port|p=i',
    help        => 'Port number (default: %s)',
    default     => 161,
);

$np->add_arg(
    spec        => 'community|C=s',
    help        => 'SNMP community string (default: %s)',
    default     => 'public',
);

$np->add_arg(
    spec        => '1',
    help        => 'Use SNMP protocol version 1',
);

$np->add_arg(
    spec        => 'description|d=s',
    help        => q{Filter the storage resource to be monitored by matching STRING against
   the start of the description (i.e. "C:" would match "C:\" but not
   "Drive C:")}
);

$np->add_arg(
    spec        => 'ram',
    help        => 'Include resources with a storage type of "RAM"'
);

$np->add_arg(
    spec        => 'virtual',
    help        => 'Include resources with a storage type of "virtual memory"'
);

$np->add_arg(
    spec        => 'fixed',
    help        => 'Include resources with a storage type of "fixed disk"'
);

$np->add_arg(
    spec        => 'network',
    help        => 'Include resources with a storage type of "network disk"'
);

$np->add_arg(
    spec        => 'warning|w=i',
    help        => 'Exit with WARNING status if resource usage exceeds PERCENT%',
    required    => 1,
    label       => 'PERCENT'
);

$np->add_arg(
    spec        => 'critical|c=i',
    help        => 'Exit with CRITICAL status if resource usage exceeds PERCENT%',
    required    => 1,
    label       => 'PERCENT'
);

$np->getopts;

my $warning = $np->opts->warning;
my $critical = $np->opts->critical;

if (($warning < 0) || ($warning > 100)) {
    plugin_die($np, 'Warning argument must be an integer value between 0 and 100, try --help');
}

if (($critical < 0) || ($critical > 100)) {
    plugin_die($np, 'Critical argument must be an integer value between 0 and 100, try --help');
}

# Define a hash of requested type OIDs for fast lookup
my $typefilter;
$typefilter->{OID_STORAGE_TYPE_RAM()} = 1 if ($np->opts->ram);
$typefilter->{OID_STORAGE_TYPE_VIRTUAL_MEMORY()} = 1 if ($np->opts->virtual);
$typefilter->{OID_STORAGE_TYPE_FIXED_DISK()} = 1 if ($np->opts->fixed);
$typefilter->{OID_STORAGE_TYPE_NETWORK_DISK()} = 1 if ($np->opts->network);

my ($session, $error) = Net::SNMP->session(
    -hostname   => $np->opts->host,
    -version    => $np->opts->{'1'} ? '1' : '2',
    -community  => $np->opts->community,
    -timeout    => $np->opts->timeout/4,
    -port       => $np->opts->port,
    -retries    => 1,
);

if (!defined($session)) {
    alarm 0;
    $np->nagios_die($error);
}

my $result = $session->get_table(
    -baseoid    => OID_STORAGE_DESC_TABLE
);

if (!defined($result)) {
    alarm 0;
    $error = $session->error();
    $session->close();
    if ($error =~ /requested table is empty/i) {
        $error = 'Device does not support the HOST-RESOURCES-MIB';
    }
    $np->nagios_die($error);
}

my $data = {};

my $desc = $np->opts->description;
my $desclen = defined($desc) ? length($desc) : 0;

while (my ($oid, $value) = each(%$result)) {
    if (!defined($desc) || substr($value, 0, $desclen) eq $desc) {
        # Strip "Label:NNN Serial Number XXX" from Windows fixed disk descriptions
        $value =~ s/\s+Label:.*\s+Serial Number.+$//;
        $data->{get_oid_index($oid)} = { desc => $value };
    }
}

if (!%$data) {
    alarm 0;
    $session->close();
    if (defined($desc)) {
        $np->nagios_die("No storage resources found matching `$desc'");
    } else {
        $np->nagios_die("No storage resources found");
    }
}

my $oids = [];
push(@$oids, map { OID_STORAGE_UNITS_TABLE . ".$_" } keys(%$data));
push(@$oids, map { OID_STORAGE_SIZE_TABLE . ".$_" } keys(%$data));
push(@$oids,  map { OID_STORAGE_USED_TABLE . ".$_" } keys(%$data));

if (defined($typefilter)) {
    push(@$oids, map { OID_STORAGE_TYPE_TABLE . ".$_" } keys(%$data));
}

$result = $session->get_request(
    -varbindlist => $oids
);

alarm 0;

if (!defined($result)) {
    $error = $session->error();
    $session->close();
    $np->nagios_die($error);
}

$session->close();

while (my ($oid, $value) = each(%$result)) {
    my $idx = get_oid_index($oid);
    next if (!exists($data->{$idx}));

    if (oid_base_match(OID_STORAGE_UNITS_TABLE, $oid)) {
        $data->{$idx}->{unit} = $value;
    } elsif (oid_base_match(OID_STORAGE_SIZE_TABLE, $oid)) {
        # handle integer overflow
        $value += 2**32 if $value < 0;
        $data->{$idx}->{size} = $value;
    } elsif (oid_base_match(OID_STORAGE_USED_TABLE, $oid)) {
        # handle integer overflow
        $value += 2**32 if $value < 0;
        $data->{$idx}->{used} = $value;
    } elsif (defined($typefilter) && oid_base_match(OID_STORAGE_TYPE_TABLE, $oid)) {
        if (!exists($typefilter->{$value})) {
            delete($data->{$idx})
        }
    }
}

if (!%$data) {
    $np->nagios_die("No storage resources found matching the requested type(s)");
}

# Generate a list of indexes sorted by description so the graphs don't
# display in a random order
my @sorted_indexes = sort { lc($data->{$a}->{desc}) cmp lc($data->{$b}->{desc}) } keys(%$data);

foreach my $idx (@sorted_indexes) {
    my $size = $data->{$idx}->{unit} * $data->{$idx}->{size};
    my $used = $data->{$idx}->{unit} * $data->{$idx}->{used};
    my $used_pc = 0;

    # Windows sometimes lists the size as 0, so avoid the divide
    # by zero error in that case.
    $used_pc = ($used / $size) * 100 if ($size);
    my $warn = ($size / 100) * $np->opts->warning;
    my $crit = ($size / 100) * $np->opts->critical;

    my $code = $np->check_threshold(
        check       => $used,
        warning     => $warn,
        critical    => $crit
    );

    $np->add_perfdata(
        label       => $data->{$idx}->{desc},
        value       => $used,
        uom         => 'B',
        min         => 0,
        max         => $size,
        warning     => $warn,
        critical    => $crit
    );

    $np->add_message($code, sprintf(
        '%s: %.1f%% used (%s/%s)',
        $data->{$idx}->{desc}, $used_pc,
        bytes_to_string($used),
        bytes_to_string($size)
    ));
}

my ($code, $message) = $np->check_messages(join => ', ');

$np->nagios_exit($code, $message);
