#!@PERL@
# vim: et sts=4 sw=4 ts=4
# nagios: +epn
#
# @COPYRIGHT@
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#
# Please send comments, bugs and feature requests to @BUGREPORT@

use strict;
use warnings;

use Net::SNMP qw(:snmp);
use Nagios::Plugin;

BEGIN {
    no warnings 'redefine';
    *Nagios::Plugin::Functions::get_shortname = sub {};
}

use constant {
    VERSION     => '@VERSION@',
    BLURB       => q{This plugin checks the status of a printer that supports the RFC1759
printer MIB},
    SHORTNAME   => 'Printer',
    USAGE       => q{Usage: %s -H <host> [-C <community>] [-2] [-t <timeout>]},
    LICENSE     => q{@COPYRIGHT@

This plugin is free software, and comes with ABSOLUTELY NO WARRANTY.
It may be used, redistributed and/or modified under the terms of the
ISC Licence (see http://opensource.org/licenses/isc-license.txt).},
    TIMEOUT     => 10,
};

use constant {
    # OIDs
    # HOST-RESOURCES-MIB::hrDeviceStatus.1
    OID_DEVICE_STATUS           => '.1.3.6.1.2.1.25.3.2.1.5.1',
    # HOST-RESOURCES-MIB::hrPrinterStatus.1
    OID_PRINTER_STATUS          => '.1.3.6.1.2.1.25.3.5.1.1.1',
    # HOST-RESOURCES-MIB::hrPrinterDetectedErrorState.1
    OID_PRINTER_ERROR_STATUS    => '.1.3.6.1.2.1.25.3.5.1.2.1',
    # Values for hrDeviceStatus
    DEVICE_UNKNOWN  => 1,
    DEVICE_RUNNING  => 2,
    DEVICE_WARNING  => 3,
    DEVICE_TESTING  => 4,
    DEVICE_DOWN     => 5,
    # Values for hrPrinterStatus
    PRINTER_OTHER       => 1,
    PRINTER_UNKNOWN     => 2,
    PRINTER_IDLE        => 3,
    PRINTER_PRINTING    => 4,
    PRINTER_WARMUP      => 5,
    # Bit values for hrPrinterDetectedErrorState
    PRINTER_ERROR_STATUS_BITS => [
        'paper low', 'no paper', 'toner low', 'no toner',
        'door open', 'jammed', 'offline', 'service needed'
    ],
};

sub decode_error_status_bitstring {
    my @bits = split(//, unpack('B8', shift));

    if (scalar(@bits) != 8) {
        return 'invalid error status value';
    }

    for (my $i = 0; $i < 8; ++$i) {
        if ($bits[$i] == 1) {
            return PRINTER_ERROR_STATUS_BITS->[$i];
        }
    }

    return 'no error bits set?!';
}

sub stringify_printer_status {
    my $val = shift;

    if ($val == PRINTER_IDLE) {
        return 'idle';
    } elsif ($val == PRINTER_PRINTING) {
        return 'printing';
    } elsif ($val == PRINTER_WARMUP) {
        return 'warming up';
    } else {
        return 'no errors';
    }
}

my $np = Nagios::Plugin->new(
    version     => VERSION,
    blurb       => BLURB,
    shortname   => SHORTNAME,
    usage       => USAGE,
    license     => LICENSE,
    timeout     => TIMEOUT,
);

$np->add_arg(
    spec        => 'host|H=s',
    help        => q{IP address or hostname (use an IP address if possible to prevent a
   DNS query)},
    label       => 'ADDRESS',
    required    => 1,
);

$np->add_arg(
    spec        => 'community|C=s',
    help        => 'SNMP community string (default: %s)',
    default     => 'public',
);

$np->add_arg(
    spec        => '2',
    help        => 'Use SNMP protocol version 2',
);

$np->getopts;

alarm $np->opts->timeout;

my ($session, $error) = Net::SNMP->session(
    -hostname   => $np->opts->host,
    -version    => $np->opts->{'2'} ? '2' : '1',
    -community  => $np->opts->community,
    -timeout    => $np->opts->timeout/4,
    -port       => 161,
    -retries    => 1,
);

if (! defined($session)) {
    alarm 0;
    $np->nagios_die($error);
}

my @oids = (
    OID_DEVICE_STATUS,
    OID_PRINTER_STATUS,
    OID_PRINTER_ERROR_STATUS
);

my $result = $session->get_request(
    -varbindlist    => \@oids,
);

if (! defined($result)) {
    alarm 0;
    $error = $session->error;
    $session->close();
    $np->nagios_die($error);
}

# disable the alarm now we've run the queries
alarm 0;

if ($result->{OID_DEVICE_STATUS()} eq 'noSuchObject') {
    $np->nagios_die('Device does not appear to support the RFC1759 printer MIB');
} elsif ($result->{OID_DEVICE_STATUS()} == DEVICE_RUNNING) {
    $np->nagios_exit(OK, sprintf(
        'Status: %s',
        stringify_printer_status($result->{OID_PRINTER_STATUS()})
    ));
} elsif ($result->{OID_DEVICE_STATUS()} == DEVICE_WARNING) {
    $np->nagios_exit(WARNING, sprintf(
        'Status: %s',
        decode_error_status_bitstring($result->{OID_PRINTER_ERROR_STATUS()})
    ));
} elsif ($result->{OID_DEVICE_STATUS()} == DEVICE_DOWN) {
    $np->nagios_exit(CRITICAL, sprintf(
        'Status: %s',
        decode_error_status_bitstring($result->{OID_PRINTER_ERROR_STATUS()})
    ));
} elsif ($result->{OID_DEVICE_STATUS()} == DEVICE_TESTING) {
    # TODO: Should this be warning or critical?
    $np->nagios_exit(WARNING, 'Status: testing');
} else {
    $np->nagios_exit(UNKNOWN, 'Status: no errors');
}
