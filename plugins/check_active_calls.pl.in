#!@PERL@
# vim: et sts=4 sw=4 ts=4
# nagios: +epn
#
# @COPYRIGHT@
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#
# Please send comments, bugs and feature requests to @BUGREPORT@

use strict;
use warnings;

use Net::SNMP;
use Nagios::Plugin;

BEGIN {
    no warnings 'redefine';
    *Nagios::Plugin::Functions::get_shortname = sub {};
}

use constant {
    VERSION     => '@VERSION@',
    BLURB       => q{This plugin checks the number of active calls on a
device supporting the DIAL-CONTROL-MIB.},
    SHORTNAME   => 'Active Calls',
    USAGE       => q{Usage: %s -H <host> [-C <community>] [-t <timeout>] [-n <number>]
       [-w <threshold>] [-c <threshold>]},
    LICENSE     => q{@COPYRIGHT@

This plugin is free software, and comes with ABSOLUTELY NO WARRANTY.
It may be used, redistributed and/or modified under the terms of the
ISC Licence (see http://opensource.org/licenses/isc-license.txt).},
    TIMEOUT     => 10,
};

use constant {
    # DIAL-CONTROL-MIB::callActivePeerAddress
    OID_ACTIVE_CALLS    => '1.3.6.1.2.1.10.21.1.3.1.1.3',
};

my $np = Nagios::Plugin->new(
    version     => VERSION,
    blurb       => BLURB,
    shortname   => SHORTNAME,
    usage       => USAGE,
    license     => LICENSE,
    timeout     => TIMEOUT,
);

$np->add_arg(
    spec        => 'host|H=s',
    help        => q{IP address or hostname (use an IP address if possible to prevent a
   DNS query)},
    label       => 'ADDRESS',
    required    => 1,
);

$np->add_arg(
    spec        => 'community|C=s',
    help        => 'SNMP community string (default: %s)',
    default     => 'public',
);

$np->add_arg(
    spec        => 'number|n=s',
    help        => 'Filter active calls based on NUMBER',
    label       => 'NUMBER',
);

$np->add_arg(
    spec        => 'warning|w=s',
    help        => 'Number of calls to result in WARNING status',
    label       => 'THRESHOLD',
);

$np->add_arg(
    spec        => 'critical|c=s',
    help        => 'Number of calls to result in CRITICAL status',
    label       => 'THRESHOLD',
);

$np->getopts;

alarm $np->opts->timeout;

my ($session, $error) = Net::SNMP->session(
    -hostname   => $np->opts->host,
    -version    => '2',
    -community  => $np->opts->community,
    -timeout    => $np->opts->timeout/4,
    -retries    => 1,
    -port       => 161,
);

if (! defined($session)) {
    alarm 0;
    $np->nagios_die($error);
}

my $active_call_table = $session->get_table(
    -baseoid    => OID_ACTIVE_CALLS,
);

if (! defined($active_call_table)) {
    alarm 0;
    $error = $session->error;
    $session->close();

    # If no calls are active then the table is empty.
    # Net::SNMP treats this as an error so we must catch it
    # here.
    unless ($error =~ /table is empty/) {
        $np->nagios_die($error);
    }
}

alarm 0;

my $cnt = 0;
my ($code, $msg);

if ($np->opts->number) {
    while (my ($key, $value) = each(%$active_call_table)) {
        if ($value eq $np->opts->number) {
            ++$cnt;
        }
    }
    $np->add_perfdata(
        label       => sprintf("Active calls to %s", $np->opts->number),
        value       => $cnt,
        warning     => ($np->opts->warning || undef),
        critical    => ($np->opts->critical || undef),
    );

    $msg = sprintf(
        "%i active call%s to %s",
        $cnt, ($cnt == 1 ? '' : 's'), $np->opts->number
    );
} else {
    # divide number of calls by 2 as both the inbound and outbound
    # leg of a call appear in the SNMP table.
    # TODO: Confirm this is the case for all devices
    $cnt = int(scalar(keys(%$active_call_table))/2);
   
    $np->add_perfdata(
        label =>    'Active calls',
        value =>    $cnt,
        warning =>  ($np->opts->warning || undef),
        critical => ($np->opts->critical || undef)
    );

    $msg = sprintf(
        "%i active call%s",
        $cnt, ($cnt == 1 ? '' : 's')
    );
}

$code = $np->check_threshold(
    check       => $cnt,
    warning     => ($np->opts->warning || undef),
    critical    => ($np->opts->critical || undef)
);

$np->nagios_exit($code, $msg);
