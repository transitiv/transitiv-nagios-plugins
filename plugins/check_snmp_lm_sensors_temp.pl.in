#!@PERL@ -w
# vim: et sts=4 sw=4 ts=4
# nagios: +epn
#
# @COPYRIGHT@
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#
# Please send comments, bugs and feature requests to @BUGREPORT@

use strict;
use Net::SNMP qw(:snmp);
use Nagios::Plugin;

use constant {
    VERSION     => '@VERSION@',
    BLURB       => q{This plugin uses SNMP to query hosts for temperature data reported by lm-sensors.},
    SHORTNAME   => 'Temperature',
    USAGE       => q{Usage: %s -H <host> -n <interface name> [-i] [-2] [-C <community>]},
    LICENSE     => q{@COPYRIGHT@

This plugin is free software, and comes with ABSOLUTELY NO WARRANTY.
It may be used, redistributed and/or modified under the terms of the
ISC Licence (see http://opensource.org/licenses/isc-license.txt).},
    TIMEOUT     => 10,
};

my $np = Nagios::Plugin->new(
    version     => VERSION,
    blurb       => BLURB,
    shortname   => SHORTNAME,
    usage       => USAGE,
    license     => LICENSE,
    timeout     => TIMEOUT,
);

# Define the OIDs we are interested in
# Sensor index table
my $sensor_index_table_oid = '1.3.6.1.4.1.2021.13.16.5.1.1';
# Sensor device table
my $sensor_device_table_oid = '1.3.6.1.4.1.2021.13.16.5.1.2';
# Sensor value table
my $sensor_value_table_oid = '1.3.6.1.4.1.2021.13.16.5.1.3';

# Define our arguments
$np->add_arg(
    spec        => 'host|H=s',
    help        => q{IP address or hostname (use an IP address if possible to prevent a
   DNS query},
    label       => 'ADDRESS',
    required    => 1,
);

$np->add_arg(
    spec        => 'community|C=s',
    help        => 'SNMP community string (default: %s)',
    default     => 'public',
);

$np->add_arg(
    spec        => 'name|n=s',
    help        => 'Sensor name (e.g. "Core 0" etc). Enclose in quotes when the name contains a space',
    required    => 1,
);

$np->add_arg(
    spec        => 'warning|w=i',
    help        => 'Integer warning temperature',
    required    => 1,
    label       => 'CELSIUS'
);

$np->add_arg(
    spec        => 'critical|c=i',
    help        => 'Integer critical temperature',
    required    => 1,
    label       => 'CELSIUS'
);

$np->add_arg(
    spec        => 'inverse|i',
    help        => 'The default logic alerts if the sensor value is above a threshold, this option inverts that to alert if the sensor is below the threshold',
);

$np->add_arg(
    spec        => '2',
    help        => 'Use SNMP protocol version 2',
);

$np->getopts;
alarm $np->opts->timeout;

my $warning = $np->opts->warning;
my $critical = $np->opts->critical;

my ($session, $error) = Net::SNMP->session(
    -hostname   => $np->opts->host,
    -version    => $np->opts->{'2'} ? '2' : '1',
    -community  => $np->opts->community,
    -timeout    => $np->opts->timeout/4,
    -retries    => 1,
    -port       => 161,
);

if (! defined($session)) {
    alarm 0;
    $np->nagios_die($error);
}

# Walk the sensor device table
my $sensor_table = $session->get_table(
    -baseoid    => $sensor_device_table_oid,
);

# Bail if we couldn't walk the table
if (! defined($sensor_table)) {
    alarm 0;
    $error = $session->error;
    $session->close();
    $np->nagios_die($error);
}

# Index number of the given sensor in the table
my $sensor_index;

# Look for our sensor in the table and get its index number
while (my ($key, $val) = each %$sensor_table) {
    if ($val eq $np->opts->name) {
        $sensor_index = substr $key, -1;
        last;
    }
}

# Check we actually got an interface
if (!defined($sensor_index)) {
    $np->nagios_die("No sensor found matching " . $np->opts->name);
};

# Get the sensor value
my $sensor_value_oid = $sensor_value_table_oid . '.' . $sensor_index;

# Build an SNMP query which calls the OIDs constructed above

my @oids = ($sensor_value_oid);

my $result = $session->get_request(
    -varbindlist    => \@oids,
);

if (!defined($result)) {
    alarm 0;
    $error = $session->error;
    $session->close();
    $np->nagios_die($error);
}

# disable the alarm now we've run the queries
alarm 0;

# index the hash by the OID
my $sensor_value = $$result{$sensor_value_oid}/1000;

# Output the check result and status according to whether inverse was specified
if (!defined($np->opts->inverse)) {
    if ($sensor_value < $warning) {
        $np->add_message(OK,$np->opts->name . " is " . $sensor_value . " Celsius");
    } else {
        if ($sensor_value < $critical) {
            $np->add_message(WARNING,$np->opts->name . " is " . $sensor_value . " Celsius");
        } else {
            $np->add_message(CRITICAL,$np->opts->name . " is " . $sensor_value . " Celsius");
        }
    }
} else {
    if ($sensor_value > $warning) {
        $np->add_message(OK,$np->opts->name . " is " . $sensor_value . " Celsius");
    } else {
        if ($sensor_value > $critical) {
            $np->add_message(WARNING,$np->opts->name . " is " . $sensor_value . " Celsius");
        } else {
            $np->add_message(CRITICAL,$np->opts->name . " is " . $sensor_value . " Celsius");
        }
    }
}

$np->add_perfdata(
    label       => 'Celsius',
    value       => $sensor_value,
    warning     => $warning,
    critical    => $critical,
);

my ($code, $message) = $np->check_messages(
    join    => ', '
);

$np->nagios_exit($code, $message);
