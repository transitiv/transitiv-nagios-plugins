#!@PERL@ -w
# vim: et sts=4 sw=4 ts=4
# nagios: +epn
#
# @COPYRIGHT@
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#
# Please send comments, bugs and feature requests to @BUGREPORT@

use strict;
use Net::SNMP;
use Nagios::Plugin;

use constant {
    VERSION     => '@VERSION@',
    BLURB       => q{This plugin checks the failover status of a Cisco PIX firewall},
    SHORTNAME   => 'PIX Failover',
    USAGE       => q{Usage: %s -H <host> [-1] [-C <community>] [-t <timeout>]},
    LICENSE     => q{@COPYRIGHT@

This plugin is free software, and comes with ABSOLUTELY NO WARRANTY.
It may be used, redistributed and/or modified under the terms of the
ISC Licence (see http://opensource.org/licenses/isc-license.txt).},
    TIMEOUT     => 10,
};

use constant {
    # CISCO-FIREWALL-MIB::cfwHardwareInformation.primaryUnit
    # identifies the primary unit of the two redundant firewalls
    OID_HW_INFO_PRI     => '.1.3.6.1.4.1.9.9.147.1.2.1.1.1.2.6',
    # CISCO-FIREWALL-MIB::cfwHardwareInformation.secondaryUnit
    # identifies the secondary unit of the two redundant firewalls
    OID_HW_INFO_SEC     => '.1.3.6.1.4.1.9.9.147.1.2.1.1.1.2.7',
    # CISCO-FIREWALL-MIB::cfwHardwareStatusValue.primaryUnit
    OID_HW_STATUS_PRI   => '.1.3.6.1.4.1.9.9.147.1.2.1.1.1.3.6',
    # CISCO-FIREWALL-MIB::cfwHardwareStatusValue.secondaryUnit
    OID_HW_STATUS_SEC   => '.1.3.6.1.4.1.9.9.147.1.2.1.1.1.3.7',
    # CISCO-FIREWALL-MIB::cfwHardwareStatusDetail.primaryUnit
    OID_HW_DETAIL_PRI   => '.1.3.6.1.4.1.9.9.147.1.2.1.1.1.4.6',
    # CISCO-FIREWALL-MIB::cfwHardwareStatusDetail.secondaryUnit
    OID_HW_DETAIL_SEC   => '.1.3.6.1.4.1.9.9.147.1.2.1.1.1.4.7',

    # HardwareStatus enumeration values
    # Generic resource event
    STATUS_VALUE_OTHER      => 1,
    # The resource is in service.
    STATUS_VALUE_UP         => 2,
    # The resource is not in service.
    STATUS_VALUE_DOWN       => 3,
    # There has been an error for this resource.
    STATUS_VALUE_ERROR      => 4,
    # The resource is overheating.
    STATUS_VALUE_OVERTEMP   => 5,
    # The resource is busy.
    STATUS_VALUE_BUSY       => 6,
    # A device doesn't have its needed media.
    STATUS_VALUE_NOMEDIA    => 7,
    # Processing has switched to the backup.
    STATUS_VALUE_BACKUP     => 8,
    # This is the active unit.
    STATUS_VALUE_ACTIVE     => 9,
    # This is the standby unit.
    STATUS_VALUE_STANDBY    => 10,

    # Mapping of HardwareStatus values to strings
    STATUS_VALUE_STRINGS => [
        undef,
        'unknown',
        'up',
        'down',
        'error',
        'overheating',
        'busy',
        'no media',
        'switched to backup',
        'active',
        'standby'
    ]
};

my $np = Nagios::Plugin->new(
    version     => VERSION,
    blurb       => BLURB,
    shortname   => SHORTNAME,
    usage       => USAGE,
    license     => LICENSE,
    timeout     => TIMEOUT,
);

$np->add_arg(
    spec        => 'host|H=s',
    help        => q{IP address or hostname (use an IP address if possible to prevent a
   DNS query)},
    label       => 'ADDRESS',
    required    => 1,
);

$np->add_arg(
    spec        => 'community|C=s',
    help        => 'SNMP community string (default: %s)',
    default     => 'public',
);

$np->add_arg(
    spec        => '1',
    help        => 'Use SNMP protocol version 1',
);

$np->getopts;

alarm $np->opts->timeout;

my ($session, $error) = Net::SNMP->session(
    -hostname   => $np->opts->host,
    -version    => $np->opts->{'1'} ? '1' : '2',
    -community  => $np->opts->community,
    -timeout    => $np->opts->timeout/4,
    -retries    => 1,
    -port       => 161,
);

if (! defined($session)) {
    alarm 0;
    $np->nagios_die($error);
}

my @oids = (
    OID_HW_INFO_PRI,
    OID_HW_INFO_SEC,
    OID_HW_STATUS_PRI,
    OID_HW_STATUS_SEC,
    OID_HW_DETAIL_PRI,
    OID_HW_DETAIL_SEC,
);

my $result = $session->get_request(
    -varbindlist    => \@oids
);

if (! defined($result)) {
    alarm 0;
    $error = $session->error;
    $session->close();
    $np->nagios_die($error);
}

alarm 0;

if ($$result{OID_HW_INFO_PRI()} eq 'noSuchObject') {
    $np->nagios_die('Device does not appear to support the CISCO-FIREWALL-MIB');
}

if ($$result{OID_HW_DETAIL_PRI()} =~ qr/Failover Off/i) {
    $np->nagios_die('Failover is not configured on this device');
}

my $status_primary = $$result{OID_HW_STATUS_PRI()};
my $info_primary = $$result{OID_HW_INFO_PRI()};
my $status_secondary = $$result{OID_HW_STATUS_SEC()};
my $info_secondary = $$result{OID_HW_INFO_SEC()};
my $code;

# If the failover configuration is normal we return OK
# If the failover configuration is in a degraded state (i.e. one of
# the devices is non-functional and one is active) we return WARNING
# If both devices in the failover configuration are non-functional
# we return CRITICAL
#
# This logic is documented below:
#
# Primary   Secondary   Exit Status
# Firewall  Firewall
# =================================
# active    standby     OK
# standby   active      OK
# active    !standby    WARNING
# !active   active      WARNING
# !active   !active     CRITICAL

if ($status_primary == STATUS_VALUE_ACTIVE) {
    if ($status_secondary == STATUS_VALUE_STANDBY) {
        $code = OK;
    } else {
        $code = WARNING;
    }
} elsif ($status_secondary == STATUS_VALUE_ACTIVE &&
         $status_primary == STATUS_VALUE_STANDBY) {
         $code = OK;
} else {
    if ($status_secondary == STATUS_VALUE_ACTIVE) {
        $code = WARNING;
    } else {
        $code = CRITICAL;
    }
}

$np->nagios_exit($code, sprintf(
        "%s: %s / %s: %s",
        $info_primary || "Primary device",
        STATUS_VALUE_STRINGS->[$status_primary],
        $info_secondary || "Secondary device",
        STATUS_VALUE_STRINGS->[$status_secondary]
));
