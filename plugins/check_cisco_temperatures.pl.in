#!@PERL@ -w
# vim: et sts=4 sw=4 ts=4
# nagios: +epn
#
# @COPYRIGHT@
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#
# Please send comments, bugs and feature requests to @BUGREPORT@

use strict;
use Net::SNMP qw(:snmp);
use Nagios::Plugin;

use constant {
    VERSION     => '@VERSION@',
    BLURB       => q{This plugin checks the temperature readings of Cisco devices that
support the CISCO-ENVMON-MIB.},
    SHORTNAME   => 'Temperatures',
    USAGE       => q{Usage: %s -H <host> [-p <port>] [-C <community>]
       [-2] [-i]},
   LICENSE     => q{@COPYRIGHT@

This plugin is free software, and comes with ABSOLUTELY NO WARRANTY.
It may be used, redistributed and/or modified under the terms of the
ISC Licence (see http://opensource.org/licenses/isc-license.txt).},
    TIMEOUT     => 10,
};

use constant {
    # CISCO-ENVMON-MIB::ciscoEnvMonTemperatureStatusTable
    OID_STATUS_TABLE    => '1.3.6.1.4.1.9.9.13.1.3.1',
    # CISCO-ENVMON-MIB::ciscoEnvMonTemperatureStatusDescr
    OID_STATUS_DESC_TABLE   => '1.3.6.1.4.1.9.9.13.1.3.1.2',
    # CISCO-ENVMON-MIB::ciscoEnvMonTemperatureStatusValue
    OID_STATUS_VALUE_TABLE  => '1.3.6.1.4.1.9.9.13.1.3.1.3',
    # CISCO-ENVMON-MIB::ciscoEnvMonTemperatureThreshold
    OID_THRESHOLD_TABLE     => '1.3.6.1.4.1.9.9.13.1.3.1.4',
    # CISCO-ENVMON-MIB::ciscoEnvMonTemperatureState
    OID_STATE_TABLE         => '1.3.6.1.4.1.9.9.13.1.3.1.6',

    # ciscoEnvMonTemperatureState enumeration values
    # normal: the environment is good, such as low temperature.
    STATE_VALUE_NORMAL          => 1,
    # warning: the environment is bad, such as temperature above normal
    # operation range but not too high.
    STATE_VALUE_WARNING         => 2,
    # critical: the environment is very bad, such as temperature much
    # higher than normal operation limit.
    STATE_VALUE_CRITICAL        => 3,
    # shutdown: the environment is the worst, the system should be
    # shutdown immediately.
    STATE_VALUE_SHUTDOWN        => 4,
    # notPresent: the environmental monitor is not present, such as
    # temperature sensors do not exist.
    STATE_VALUE_NOT_PRESENT     => 5,
    # notFunctioning: the environmental monitor does not function
    # properly, such as a temperature sensor generates a abnormal data
    # like 1000 C.
    STATE_VALUE_NOT_FUNCTIONING => 6,

    STATE_VALUE_STRINGS         => [
        undef,
        'normal',
        'warning',
        'critical',
        'shutdown',
        'not present',
        'not functioning'
    ]
};

my $np = Nagios::Plugin->new(
    version     => VERSION,
    blurb       => BLURB,
    shortname   => SHORTNAME,
    usage       => USAGE,
    license     => LICENSE,
    timeout     => TIMEOUT,
);

$np->add_arg(
    spec        => 'host|H=s',
    help        => q{IP address or hostname (use an IP address if possible to prevent a
   DNS query)},
    label       => 'ADDRESS',
    required    => 1,
);

$np->add_arg(
    spec        => 'port|p=i',
    help        => 'Port number (default: %s)',
    default     => 161,
);

$np->add_arg(
    spec        => 'community|C=s',
    help        => 'SNMP community string (default: %s)',
    default     => 'public',
);

$np->add_arg(
    spec        => '2',
    help        => 'Use SNMP protocol version 2',
);

$np->add_arg(
    spec        => 'ignore|i',
    help        => q{Do not exit with CRITICAL status when a PSU is reported as "not 
   functioning"},
);

$np->getopts;

alarm $np->opts->timeout;

my ($session, $error) = Net::SNMP->session(
    -hostname   => $np->opts->host,
    -version    => $np->opts->{'2'} ? '2' : '1',
    -community  => $np->opts->community,
    -timeout    => $np->opts->timeout/4,
    -port       => $np->opts->port,
    -retries    => 1,
);

unless (defined($session)) {
    alarm 0;
    $np->nagios_die($error);
}

my $result = $session->get_table(
    -baseoid    => OID_STATUS_TABLE
);

unless (defined($result)) {
    alarm 0;
    $error = $session->error;
    $session->close();
    $np->nagios_die($error);
}

$session->close();
alarm 0;

my (@descs, @states, @statuses, @thresholds);

foreach my $key (oid_lex_sort(keys %$result)) {
    if (oid_base_match(OID_STATE_TABLE, $key)) {
        push(@states, $$result{$key});
    } elsif (oid_base_match(OID_STATUS_DESC_TABLE, $key)) {
        push(@descs, $$result{$key});
    } elsif (oid_base_match(OID_STATUS_VALUE_TABLE, $key)) {
        push(@statuses, $$result{$key});
    } elsif (oid_base_match(OID_THRESHOLD_TABLE, $key)) {
        push(@thresholds, $$result{$key});
    }
}

my $len = scalar(@descs);

unless ($len) {
    $np->nagios_die('No sensors found');
}

my $ok = 0;

for (my $i = 0; $i < $len; ++$i) {
    my $code = CRITICAL;

    if ($states[$i] == STATE_VALUE_NORMAL) {
        $code = OK;
    } elsif ($states[$i] == STATE_VALUE_WARNING) {
        $code = WARNING;
    } elsif ($states[$i] == STATE_VALUE_NOT_FUNCTIONING && $np->opts->ignore) {
        $code = OK;
    }

    if ($code == OK) {
        ++$ok;
    } else {
        $np->add_message($code, sprintf(
            '%s: %s',
            $descs[$i],
            STATE_VALUE_STRINGS->[$states[$i]] || 'unknown'
        ));
    }
    
    # Some devices don't report temperature values/thresholds
    if (defined($statuses[$i]) && defined($thresholds[$i])) {
        $np->add_perfdata(
            label       => $descs[$i],
            value       => $statuses[$i],
            critical    => $thresholds[$i],
        );
    }

}

if ($ok == $len) {
    $np->add_message(OK, "All sensors within bounds");
}

my ($code, $message) = $np->check_messages(join => ', ');
$np->nagios_exit($code, $message);
